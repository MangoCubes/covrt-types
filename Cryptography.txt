Notation:
 - V: Vault
 - C: Container
 - G: Group
 - U: User
 - I: Item
 - F: Field
   - V1: Instance of a vault
 - Sym: Symmetric key
   - Dec: Decryption key, only generated from user secrets and is never sent to server
 - Pub/Priv: Public/Private key
   - U1.Sym: Symmetric key of user 1
 - Ver: Verification key, only generated from user secrets and sent to server to authenticate
 - SE(Data, *.Sym): Symmetric encryption
 - AE(Data, *.Pub): Asymmetric encryption

Abstract specifications
 - A vault has no cryptographical features, and only serves to group multiple groups and containers
 - A container has one symmetric key that allows access to it, and can decrypt a key pair associated with it
   - Same goes for a group and each user
 - An item has a symmetric key that can decrypt it
 - A field is encrypted with the item key it is part of
 - Groups control which user can access which container, and determines which group administrates which

Constraints
 - A vault must have at least one group and at least one container
 - A group or a container can only be associated with only one vault
 - A container must be associated with at least one group
 - A user must be associated with only one group
 - A group is managed by only one parent group, and that parent group is the one that created this group

Cryptography:
 - Registration
   - U1 generates the following locally:
     - U1.Ver
     - U1.Dec
     - U1.Sym
     - U1.Pub/Priv
   - U1 sends the following to the server:
     - Email
     - U1.Ver
     - U1.Pub
     - SE(U1.Sym, U1.Dec)
     - SE(U1.Priv, U1.Sym)
 - Login
   - U1 generates the following:
     - U1.Ver
     - U1.Dec
   - U1 then sends U1.Ver to the server to authenticate, and receive the following from the server:
     - U1.Pub
     - SE(U1.Sym, U1.Dec)
     - SE(U1.Priv, U1.Sym)
   - U1 has U1.Dec, so U1 can recover U1.Sym, and U1.Priv
 - Creating a vault
   - U1 generates the following locally:
     - C1.Sym
     - C1.Priv/Pub
     - G1.Sym
     - G1.Pub/Priv
   - U1 then sends these to the server:
     - AE(C1.Sym, G1.Pub)
     - AE(G1.Sym, U1.Pub)
     - SE(C1.Priv, C1.Sym)
     - SE(G1.Priv, G1.Sym)
     - C1.Pub
     - G1.Pub
 - Accessing a group
   - U1 receives the following from the server:
     - G1.Pub
     - AE(G1.Sym, U1.Pub)
     - SE(G1.Priv, G1.Sym)
   - U1 has U1.Pub/Priv from logging in, and therefore can get G1.Sym to access the group, and the associated key pair
 - Creating a group
   - U1, as a member of the group G1, has the following:
     - G1.Sym
	 - G1.Pub/Priv
   - U1 generates the following:
     - G2.Sym
     - G2.Pub/Priv
   - U1 then sends the following to the server:
     - SE(G2.Sym, G1.Sym): This indicates that G1 manages G2, and any member of G1 has access to G2. This allows inviting user to a group they are not a member of.
     - SE(G2.Priv, G2.Sym)
     - G2.Pub
 - Invite user to the group they are part of
   - U1, as a member of the group G1, has the following:
     - G1.Sym
   - U1 can query server to fetch U2.Pub from the server
   - U1 then sends the following to thr server:
     - AE(G1.Sym, U2.Pub)
 - Invite user to a group they manage
   - U1 is in G1, which manages G2, and wishes to invite user U2 to group G2
   - U1, as a member of the group G1, has the following:
     - G1.Sym
   - U1 queries the server to fetch the following:
     - U2.Pub
	 - SE(G2.Sym, G1.Sym)
   - U1 uses G1.Sym to recover G2.Sym
   - U1 then sends the following to the server:
     - AE(G2.Sym, U2.Pub)